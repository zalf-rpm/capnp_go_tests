// Code generated by capnpc-go. DO NOT EDIT.

package hashes

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
)

type HashFactory struct{ Client *capnp.Client }

// HashFactory_TypeID is the unique identifier for the type HashFactory.
const HashFactory_TypeID = 0xaead580f97fddabc

func (c HashFactory) NewSha1(ctx context.Context, params func(HashFactory_newSha1_Params) error) (HashFactory_newSha1_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xaead580f97fddabc,
			MethodID:      0,
			InterfaceName: "capnp_schemas/hashes/hashes.capnp:HashFactory",
			MethodName:    "newSha1",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(HashFactory_newSha1_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return HashFactory_newSha1_Results_Future{Future: ans.Future()}, release
}

func (c HashFactory) AddRef() HashFactory {
	return HashFactory{
		Client: c.Client.AddRef(),
	}
}

func (c HashFactory) Release() {
	c.Client.Release()
}

// A HashFactory_Server is a HashFactory with a local implementation.
type HashFactory_Server interface {
	NewSha1(context.Context, HashFactory_newSha1) error
}

// HashFactory_NewServer creates a new Server from an implementation of HashFactory_Server.
func HashFactory_NewServer(s HashFactory_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(HashFactory_Methods(nil, s), s, c, policy)
}

// HashFactory_ServerToClient creates a new Client from an implementation of HashFactory_Server.
// The caller is responsible for calling Release on the returned Client.
func HashFactory_ServerToClient(s HashFactory_Server, policy *server.Policy) HashFactory {
	return HashFactory{Client: capnp.NewClient(HashFactory_NewServer(s, policy))}
}

// HashFactory_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func HashFactory_Methods(methods []server.Method, s HashFactory_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xaead580f97fddabc,
			MethodID:      0,
			InterfaceName: "capnp_schemas/hashes/hashes.capnp:HashFactory",
			MethodName:    "newSha1",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.NewSha1(ctx, HashFactory_newSha1{call})
		},
	})

	return methods
}

// HashFactory_newSha1 holds the state for a server call to HashFactory.newSha1.
// See server.Call for documentation.
type HashFactory_newSha1 struct {
	*server.Call
}

// Args returns the call's arguments.
func (c HashFactory_newSha1) Args() HashFactory_newSha1_Params {
	return HashFactory_newSha1_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c HashFactory_newSha1) AllocResults() (HashFactory_newSha1_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return HashFactory_newSha1_Results{Struct: r}, err
}

type HashFactory_newSha1_Params struct{ capnp.Struct }

// HashFactory_newSha1_Params_TypeID is the unique identifier for the type HashFactory_newSha1_Params.
const HashFactory_newSha1_Params_TypeID = 0x92b20ad1a58ca0ca

func NewHashFactory_newSha1_Params(s *capnp.Segment) (HashFactory_newSha1_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return HashFactory_newSha1_Params{st}, err
}

func NewRootHashFactory_newSha1_Params(s *capnp.Segment) (HashFactory_newSha1_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return HashFactory_newSha1_Params{st}, err
}

func ReadRootHashFactory_newSha1_Params(msg *capnp.Message) (HashFactory_newSha1_Params, error) {
	root, err := msg.Root()
	return HashFactory_newSha1_Params{root.Struct()}, err
}

func (s HashFactory_newSha1_Params) String() string {
	str, _ := text.Marshal(0x92b20ad1a58ca0ca, s.Struct)
	return str
}

// HashFactory_newSha1_Params_List is a list of HashFactory_newSha1_Params.
type HashFactory_newSha1_Params_List struct{ capnp.List }

// NewHashFactory_newSha1_Params creates a new list of HashFactory_newSha1_Params.
func NewHashFactory_newSha1_Params_List(s *capnp.Segment, sz int32) (HashFactory_newSha1_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return HashFactory_newSha1_Params_List{l}, err
}

func (s HashFactory_newSha1_Params_List) At(i int) HashFactory_newSha1_Params {
	return HashFactory_newSha1_Params{s.List.Struct(i)}
}

func (s HashFactory_newSha1_Params_List) Set(i int, v HashFactory_newSha1_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s HashFactory_newSha1_Params_List) String() string {
	str, _ := text.MarshalList(0x92b20ad1a58ca0ca, s.List)
	return str
}

// HashFactory_newSha1_Params_Future is a wrapper for a HashFactory_newSha1_Params promised by a client call.
type HashFactory_newSha1_Params_Future struct{ *capnp.Future }

func (p HashFactory_newSha1_Params_Future) Struct() (HashFactory_newSha1_Params, error) {
	s, err := p.Future.Struct()
	return HashFactory_newSha1_Params{s}, err
}

type HashFactory_newSha1_Results struct{ capnp.Struct }

// HashFactory_newSha1_Results_TypeID is the unique identifier for the type HashFactory_newSha1_Results.
const HashFactory_newSha1_Results_TypeID = 0xea3e50f7663f7bdf

func NewHashFactory_newSha1_Results(s *capnp.Segment) (HashFactory_newSha1_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return HashFactory_newSha1_Results{st}, err
}

func NewRootHashFactory_newSha1_Results(s *capnp.Segment) (HashFactory_newSha1_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return HashFactory_newSha1_Results{st}, err
}

func ReadRootHashFactory_newSha1_Results(msg *capnp.Message) (HashFactory_newSha1_Results, error) {
	root, err := msg.Root()
	return HashFactory_newSha1_Results{root.Struct()}, err
}

func (s HashFactory_newSha1_Results) String() string {
	str, _ := text.Marshal(0xea3e50f7663f7bdf, s.Struct)
	return str
}

func (s HashFactory_newSha1_Results) Hash() Hash {
	p, _ := s.Struct.Ptr(0)
	return Hash{Client: p.Interface().Client()}
}

func (s HashFactory_newSha1_Results) HasHash() bool {
	return s.Struct.HasPtr(0)
}

func (s HashFactory_newSha1_Results) SetHash(v Hash) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

// HashFactory_newSha1_Results_List is a list of HashFactory_newSha1_Results.
type HashFactory_newSha1_Results_List struct{ capnp.List }

// NewHashFactory_newSha1_Results creates a new list of HashFactory_newSha1_Results.
func NewHashFactory_newSha1_Results_List(s *capnp.Segment, sz int32) (HashFactory_newSha1_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return HashFactory_newSha1_Results_List{l}, err
}

func (s HashFactory_newSha1_Results_List) At(i int) HashFactory_newSha1_Results {
	return HashFactory_newSha1_Results{s.List.Struct(i)}
}

func (s HashFactory_newSha1_Results_List) Set(i int, v HashFactory_newSha1_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s HashFactory_newSha1_Results_List) String() string {
	str, _ := text.MarshalList(0xea3e50f7663f7bdf, s.List)
	return str
}

// HashFactory_newSha1_Results_Future is a wrapper for a HashFactory_newSha1_Results promised by a client call.
type HashFactory_newSha1_Results_Future struct{ *capnp.Future }

func (p HashFactory_newSha1_Results_Future) Struct() (HashFactory_newSha1_Results, error) {
	s, err := p.Future.Struct()
	return HashFactory_newSha1_Results{s}, err
}

func (p HashFactory_newSha1_Results_Future) Hash() Hash {
	return Hash{Client: p.Future.Field(0, nil).Client()}
}

type Hash struct{ Client *capnp.Client }

// Hash_TypeID is the unique identifier for the type Hash.
const Hash_TypeID = 0xf29f97dd675a9431

func (c Hash) Write(ctx context.Context, params func(Hash_write_Params) error) (Hash_write_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xf29f97dd675a9431,
			MethodID:      0,
			InterfaceName: "capnp_schemas/hashes/hashes.capnp:Hash",
			MethodName:    "write",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Hash_write_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Hash_write_Results_Future{Future: ans.Future()}, release
}
func (c Hash) Sum(ctx context.Context, params func(Hash_sum_Params) error) (Hash_sum_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xf29f97dd675a9431,
			MethodID:      1,
			InterfaceName: "capnp_schemas/hashes/hashes.capnp:Hash",
			MethodName:    "sum",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Hash_sum_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Hash_sum_Results_Future{Future: ans.Future()}, release
}

func (c Hash) AddRef() Hash {
	return Hash{
		Client: c.Client.AddRef(),
	}
}

func (c Hash) Release() {
	c.Client.Release()
}

// A Hash_Server is a Hash with a local implementation.
type Hash_Server interface {
	Write(context.Context, Hash_write) error

	Sum(context.Context, Hash_sum) error
}

// Hash_NewServer creates a new Server from an implementation of Hash_Server.
func Hash_NewServer(s Hash_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Hash_Methods(nil, s), s, c, policy)
}

// Hash_ServerToClient creates a new Client from an implementation of Hash_Server.
// The caller is responsible for calling Release on the returned Client.
func Hash_ServerToClient(s Hash_Server, policy *server.Policy) Hash {
	return Hash{Client: capnp.NewClient(Hash_NewServer(s, policy))}
}

// Hash_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Hash_Methods(methods []server.Method, s Hash_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 2)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf29f97dd675a9431,
			MethodID:      0,
			InterfaceName: "capnp_schemas/hashes/hashes.capnp:Hash",
			MethodName:    "write",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Write(ctx, Hash_write{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf29f97dd675a9431,
			MethodID:      1,
			InterfaceName: "capnp_schemas/hashes/hashes.capnp:Hash",
			MethodName:    "sum",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Sum(ctx, Hash_sum{call})
		},
	})

	return methods
}

// Hash_write holds the state for a server call to Hash.write.
// See server.Call for documentation.
type Hash_write struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Hash_write) Args() Hash_write_Params {
	return Hash_write_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Hash_write) AllocResults() (Hash_write_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Hash_write_Results{Struct: r}, err
}

// Hash_sum holds the state for a server call to Hash.sum.
// See server.Call for documentation.
type Hash_sum struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Hash_sum) Args() Hash_sum_Params {
	return Hash_sum_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Hash_sum) AllocResults() (Hash_sum_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Hash_sum_Results{Struct: r}, err
}

type Hash_write_Params struct{ capnp.Struct }

// Hash_write_Params_TypeID is the unique identifier for the type Hash_write_Params.
const Hash_write_Params_TypeID = 0xdffe94ae546cdee3

func NewHash_write_Params(s *capnp.Segment) (Hash_write_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Hash_write_Params{st}, err
}

func NewRootHash_write_Params(s *capnp.Segment) (Hash_write_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Hash_write_Params{st}, err
}

func ReadRootHash_write_Params(msg *capnp.Message) (Hash_write_Params, error) {
	root, err := msg.Root()
	return Hash_write_Params{root.Struct()}, err
}

func (s Hash_write_Params) String() string {
	str, _ := text.Marshal(0xdffe94ae546cdee3, s.Struct)
	return str
}

func (s Hash_write_Params) Data() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s Hash_write_Params) HasData() bool {
	return s.Struct.HasPtr(0)
}

func (s Hash_write_Params) SetData(v []byte) error {
	return s.Struct.SetData(0, v)
}

// Hash_write_Params_List is a list of Hash_write_Params.
type Hash_write_Params_List struct{ capnp.List }

// NewHash_write_Params creates a new list of Hash_write_Params.
func NewHash_write_Params_List(s *capnp.Segment, sz int32) (Hash_write_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Hash_write_Params_List{l}, err
}

func (s Hash_write_Params_List) At(i int) Hash_write_Params {
	return Hash_write_Params{s.List.Struct(i)}
}

func (s Hash_write_Params_List) Set(i int, v Hash_write_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Hash_write_Params_List) String() string {
	str, _ := text.MarshalList(0xdffe94ae546cdee3, s.List)
	return str
}

// Hash_write_Params_Future is a wrapper for a Hash_write_Params promised by a client call.
type Hash_write_Params_Future struct{ *capnp.Future }

func (p Hash_write_Params_Future) Struct() (Hash_write_Params, error) {
	s, err := p.Future.Struct()
	return Hash_write_Params{s}, err
}

type Hash_write_Results struct{ capnp.Struct }

// Hash_write_Results_TypeID is the unique identifier for the type Hash_write_Results.
const Hash_write_Results_TypeID = 0x80ac741ec7fb8f65

func NewHash_write_Results(s *capnp.Segment) (Hash_write_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Hash_write_Results{st}, err
}

func NewRootHash_write_Results(s *capnp.Segment) (Hash_write_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Hash_write_Results{st}, err
}

func ReadRootHash_write_Results(msg *capnp.Message) (Hash_write_Results, error) {
	root, err := msg.Root()
	return Hash_write_Results{root.Struct()}, err
}

func (s Hash_write_Results) String() string {
	str, _ := text.Marshal(0x80ac741ec7fb8f65, s.Struct)
	return str
}

// Hash_write_Results_List is a list of Hash_write_Results.
type Hash_write_Results_List struct{ capnp.List }

// NewHash_write_Results creates a new list of Hash_write_Results.
func NewHash_write_Results_List(s *capnp.Segment, sz int32) (Hash_write_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Hash_write_Results_List{l}, err
}

func (s Hash_write_Results_List) At(i int) Hash_write_Results {
	return Hash_write_Results{s.List.Struct(i)}
}

func (s Hash_write_Results_List) Set(i int, v Hash_write_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Hash_write_Results_List) String() string {
	str, _ := text.MarshalList(0x80ac741ec7fb8f65, s.List)
	return str
}

// Hash_write_Results_Future is a wrapper for a Hash_write_Results promised by a client call.
type Hash_write_Results_Future struct{ *capnp.Future }

func (p Hash_write_Results_Future) Struct() (Hash_write_Results, error) {
	s, err := p.Future.Struct()
	return Hash_write_Results{s}, err
}

type Hash_sum_Params struct{ capnp.Struct }

// Hash_sum_Params_TypeID is the unique identifier for the type Hash_sum_Params.
const Hash_sum_Params_TypeID = 0xe74bb2d0190cf89c

func NewHash_sum_Params(s *capnp.Segment) (Hash_sum_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Hash_sum_Params{st}, err
}

func NewRootHash_sum_Params(s *capnp.Segment) (Hash_sum_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Hash_sum_Params{st}, err
}

func ReadRootHash_sum_Params(msg *capnp.Message) (Hash_sum_Params, error) {
	root, err := msg.Root()
	return Hash_sum_Params{root.Struct()}, err
}

func (s Hash_sum_Params) String() string {
	str, _ := text.Marshal(0xe74bb2d0190cf89c, s.Struct)
	return str
}

// Hash_sum_Params_List is a list of Hash_sum_Params.
type Hash_sum_Params_List struct{ capnp.List }

// NewHash_sum_Params creates a new list of Hash_sum_Params.
func NewHash_sum_Params_List(s *capnp.Segment, sz int32) (Hash_sum_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Hash_sum_Params_List{l}, err
}

func (s Hash_sum_Params_List) At(i int) Hash_sum_Params { return Hash_sum_Params{s.List.Struct(i)} }

func (s Hash_sum_Params_List) Set(i int, v Hash_sum_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Hash_sum_Params_List) String() string {
	str, _ := text.MarshalList(0xe74bb2d0190cf89c, s.List)
	return str
}

// Hash_sum_Params_Future is a wrapper for a Hash_sum_Params promised by a client call.
type Hash_sum_Params_Future struct{ *capnp.Future }

func (p Hash_sum_Params_Future) Struct() (Hash_sum_Params, error) {
	s, err := p.Future.Struct()
	return Hash_sum_Params{s}, err
}

type Hash_sum_Results struct{ capnp.Struct }

// Hash_sum_Results_TypeID is the unique identifier for the type Hash_sum_Results.
const Hash_sum_Results_TypeID = 0xd093963b95a4e107

func NewHash_sum_Results(s *capnp.Segment) (Hash_sum_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Hash_sum_Results{st}, err
}

func NewRootHash_sum_Results(s *capnp.Segment) (Hash_sum_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Hash_sum_Results{st}, err
}

func ReadRootHash_sum_Results(msg *capnp.Message) (Hash_sum_Results, error) {
	root, err := msg.Root()
	return Hash_sum_Results{root.Struct()}, err
}

func (s Hash_sum_Results) String() string {
	str, _ := text.Marshal(0xd093963b95a4e107, s.Struct)
	return str
}

func (s Hash_sum_Results) Hash() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s Hash_sum_Results) HasHash() bool {
	return s.Struct.HasPtr(0)
}

func (s Hash_sum_Results) SetHash(v []byte) error {
	return s.Struct.SetData(0, v)
}

// Hash_sum_Results_List is a list of Hash_sum_Results.
type Hash_sum_Results_List struct{ capnp.List }

// NewHash_sum_Results creates a new list of Hash_sum_Results.
func NewHash_sum_Results_List(s *capnp.Segment, sz int32) (Hash_sum_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Hash_sum_Results_List{l}, err
}

func (s Hash_sum_Results_List) At(i int) Hash_sum_Results { return Hash_sum_Results{s.List.Struct(i)} }

func (s Hash_sum_Results_List) Set(i int, v Hash_sum_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Hash_sum_Results_List) String() string {
	str, _ := text.MarshalList(0xd093963b95a4e107, s.List)
	return str
}

// Hash_sum_Results_Future is a wrapper for a Hash_sum_Results promised by a client call.
type Hash_sum_Results_Future struct{ *capnp.Future }

func (p Hash_sum_Results_Future) Struct() (Hash_sum_Results, error) {
	s, err := p.Future.Struct()
	return Hash_sum_Results{s}, err
}

type Hello struct{ Client *capnp.Client }

// Hello_TypeID is the unique identifier for the type Hello.
const Hello_TypeID = 0x915d136837f8f086

func (c Hello) Hello(ctx context.Context, params func(Hello_hello_Params) error) (Hello_hello_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x915d136837f8f086,
			MethodID:      0,
			InterfaceName: "capnp_schemas/hashes/hashes.capnp:Hello",
			MethodName:    "hello",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Hello_hello_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Hello_hello_Results_Future{Future: ans.Future()}, release
}
func (c Hello) World(ctx context.Context, params func(Hello_world_Params) error) (Hello_world_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x915d136837f8f086,
			MethodID:      1,
			InterfaceName: "capnp_schemas/hashes/hashes.capnp:Hello",
			MethodName:    "world",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Hello_world_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Hello_world_Results_Future{Future: ans.Future()}, release
}

func (c Hello) AddRef() Hello {
	return Hello{
		Client: c.Client.AddRef(),
	}
}

func (c Hello) Release() {
	c.Client.Release()
}

// A Hello_Server is a Hello with a local implementation.
type Hello_Server interface {
	Hello(context.Context, Hello_hello) error

	World(context.Context, Hello_world) error
}

// Hello_NewServer creates a new Server from an implementation of Hello_Server.
func Hello_NewServer(s Hello_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Hello_Methods(nil, s), s, c, policy)
}

// Hello_ServerToClient creates a new Client from an implementation of Hello_Server.
// The caller is responsible for calling Release on the returned Client.
func Hello_ServerToClient(s Hello_Server, policy *server.Policy) Hello {
	return Hello{Client: capnp.NewClient(Hello_NewServer(s, policy))}
}

// Hello_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Hello_Methods(methods []server.Method, s Hello_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 2)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x915d136837f8f086,
			MethodID:      0,
			InterfaceName: "capnp_schemas/hashes/hashes.capnp:Hello",
			MethodName:    "hello",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Hello(ctx, Hello_hello{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x915d136837f8f086,
			MethodID:      1,
			InterfaceName: "capnp_schemas/hashes/hashes.capnp:Hello",
			MethodName:    "world",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.World(ctx, Hello_world{call})
		},
	})

	return methods
}

// Hello_hello holds the state for a server call to Hello.hello.
// See server.Call for documentation.
type Hello_hello struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Hello_hello) Args() Hello_hello_Params {
	return Hello_hello_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Hello_hello) AllocResults() (Hello_hello_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Hello_hello_Results{Struct: r}, err
}

// Hello_world holds the state for a server call to Hello.world.
// See server.Call for documentation.
type Hello_world struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Hello_world) Args() Hello_world_Params {
	return Hello_world_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Hello_world) AllocResults() (Hello_world_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Hello_world_Results{Struct: r}, err
}

type Hello_hello_Params struct{ capnp.Struct }

// Hello_hello_Params_TypeID is the unique identifier for the type Hello_hello_Params.
const Hello_hello_Params_TypeID = 0xd8c5e7c7f5cce09f

func NewHello_hello_Params(s *capnp.Segment) (Hello_hello_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Hello_hello_Params{st}, err
}

func NewRootHello_hello_Params(s *capnp.Segment) (Hello_hello_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Hello_hello_Params{st}, err
}

func ReadRootHello_hello_Params(msg *capnp.Message) (Hello_hello_Params, error) {
	root, err := msg.Root()
	return Hello_hello_Params{root.Struct()}, err
}

func (s Hello_hello_Params) String() string {
	str, _ := text.Marshal(0xd8c5e7c7f5cce09f, s.Struct)
	return str
}

// Hello_hello_Params_List is a list of Hello_hello_Params.
type Hello_hello_Params_List struct{ capnp.List }

// NewHello_hello_Params creates a new list of Hello_hello_Params.
func NewHello_hello_Params_List(s *capnp.Segment, sz int32) (Hello_hello_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Hello_hello_Params_List{l}, err
}

func (s Hello_hello_Params_List) At(i int) Hello_hello_Params {
	return Hello_hello_Params{s.List.Struct(i)}
}

func (s Hello_hello_Params_List) Set(i int, v Hello_hello_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Hello_hello_Params_List) String() string {
	str, _ := text.MarshalList(0xd8c5e7c7f5cce09f, s.List)
	return str
}

// Hello_hello_Params_Future is a wrapper for a Hello_hello_Params promised by a client call.
type Hello_hello_Params_Future struct{ *capnp.Future }

func (p Hello_hello_Params_Future) Struct() (Hello_hello_Params, error) {
	s, err := p.Future.Struct()
	return Hello_hello_Params{s}, err
}

type Hello_hello_Results struct{ capnp.Struct }

// Hello_hello_Results_TypeID is the unique identifier for the type Hello_hello_Results.
const Hello_hello_Results_TypeID = 0xece73ea1963281d3

func NewHello_hello_Results(s *capnp.Segment) (Hello_hello_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Hello_hello_Results{st}, err
}

func NewRootHello_hello_Results(s *capnp.Segment) (Hello_hello_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Hello_hello_Results{st}, err
}

func ReadRootHello_hello_Results(msg *capnp.Message) (Hello_hello_Results, error) {
	root, err := msg.Root()
	return Hello_hello_Results{root.Struct()}, err
}

func (s Hello_hello_Results) String() string {
	str, _ := text.Marshal(0xece73ea1963281d3, s.Struct)
	return str
}

func (s Hello_hello_Results) T() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Hello_hello_Results) HasT() bool {
	return s.Struct.HasPtr(0)
}

func (s Hello_hello_Results) TBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Hello_hello_Results) SetT(v string) error {
	return s.Struct.SetText(0, v)
}

// Hello_hello_Results_List is a list of Hello_hello_Results.
type Hello_hello_Results_List struct{ capnp.List }

// NewHello_hello_Results creates a new list of Hello_hello_Results.
func NewHello_hello_Results_List(s *capnp.Segment, sz int32) (Hello_hello_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Hello_hello_Results_List{l}, err
}

func (s Hello_hello_Results_List) At(i int) Hello_hello_Results {
	return Hello_hello_Results{s.List.Struct(i)}
}

func (s Hello_hello_Results_List) Set(i int, v Hello_hello_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Hello_hello_Results_List) String() string {
	str, _ := text.MarshalList(0xece73ea1963281d3, s.List)
	return str
}

// Hello_hello_Results_Future is a wrapper for a Hello_hello_Results promised by a client call.
type Hello_hello_Results_Future struct{ *capnp.Future }

func (p Hello_hello_Results_Future) Struct() (Hello_hello_Results, error) {
	s, err := p.Future.Struct()
	return Hello_hello_Results{s}, err
}

type Hello_world_Params struct{ capnp.Struct }

// Hello_world_Params_TypeID is the unique identifier for the type Hello_world_Params.
const Hello_world_Params_TypeID = 0xd65259a8a6e0a22d

func NewHello_world_Params(s *capnp.Segment) (Hello_world_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Hello_world_Params{st}, err
}

func NewRootHello_world_Params(s *capnp.Segment) (Hello_world_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Hello_world_Params{st}, err
}

func ReadRootHello_world_Params(msg *capnp.Message) (Hello_world_Params, error) {
	root, err := msg.Root()
	return Hello_world_Params{root.Struct()}, err
}

func (s Hello_world_Params) String() string {
	str, _ := text.Marshal(0xd65259a8a6e0a22d, s.Struct)
	return str
}

// Hello_world_Params_List is a list of Hello_world_Params.
type Hello_world_Params_List struct{ capnp.List }

// NewHello_world_Params creates a new list of Hello_world_Params.
func NewHello_world_Params_List(s *capnp.Segment, sz int32) (Hello_world_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Hello_world_Params_List{l}, err
}

func (s Hello_world_Params_List) At(i int) Hello_world_Params {
	return Hello_world_Params{s.List.Struct(i)}
}

func (s Hello_world_Params_List) Set(i int, v Hello_world_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Hello_world_Params_List) String() string {
	str, _ := text.MarshalList(0xd65259a8a6e0a22d, s.List)
	return str
}

// Hello_world_Params_Future is a wrapper for a Hello_world_Params promised by a client call.
type Hello_world_Params_Future struct{ *capnp.Future }

func (p Hello_world_Params_Future) Struct() (Hello_world_Params, error) {
	s, err := p.Future.Struct()
	return Hello_world_Params{s}, err
}

type Hello_world_Results struct{ capnp.Struct }

// Hello_world_Results_TypeID is the unique identifier for the type Hello_world_Results.
const Hello_world_Results_TypeID = 0x8ac2ae68b4931e01

func NewHello_world_Results(s *capnp.Segment) (Hello_world_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Hello_world_Results{st}, err
}

func NewRootHello_world_Results(s *capnp.Segment) (Hello_world_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Hello_world_Results{st}, err
}

func ReadRootHello_world_Results(msg *capnp.Message) (Hello_world_Results, error) {
	root, err := msg.Root()
	return Hello_world_Results{root.Struct()}, err
}

func (s Hello_world_Results) String() string {
	str, _ := text.Marshal(0x8ac2ae68b4931e01, s.Struct)
	return str
}

func (s Hello_world_Results) T() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Hello_world_Results) HasT() bool {
	return s.Struct.HasPtr(0)
}

func (s Hello_world_Results) TBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Hello_world_Results) SetT(v string) error {
	return s.Struct.SetText(0, v)
}

// Hello_world_Results_List is a list of Hello_world_Results.
type Hello_world_Results_List struct{ capnp.List }

// NewHello_world_Results creates a new list of Hello_world_Results.
func NewHello_world_Results_List(s *capnp.Segment, sz int32) (Hello_world_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Hello_world_Results_List{l}, err
}

func (s Hello_world_Results_List) At(i int) Hello_world_Results {
	return Hello_world_Results{s.List.Struct(i)}
}

func (s Hello_world_Results_List) Set(i int, v Hello_world_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Hello_world_Results_List) String() string {
	str, _ := text.MarshalList(0x8ac2ae68b4931e01, s.List)
	return str
}

// Hello_world_Results_Future is a wrapper for a Hello_world_Results promised by a client call.
type Hello_world_Results_Future struct{ *capnp.Future }

func (p Hello_world_Results_Future) Struct() (Hello_world_Results, error) {
	s, err := p.Future.Struct()
	return Hello_world_Results{s}, err
}

const schema_db8274f9144abc7e = "x\xda\x9cT_H\x14_\x14>g\xee\x8c#?\\" +
	"\x96\xfb\x1b_|qA\x8c\"rk\xf5!2\xd4M" +
	"\xa2\xa2\x08v\xac\x87\x0a$.:5\xc1\x8c\xca\xcc," +
	"\x12a\xff\x1e\x12\xa2\x08\xff\xa4\x10\x81%\x15\x11%$" +
	"=\xfaR B\xf4`\x84\x11E\xa9\xf4 HA\x09" +
	"\x92\x115q\xef4\xce\x9a\x99nO\xbbp\xe6\xfb\xce" +
	"\xf9\xbe\xef\x9c\xbbe\x10\xd3RJ\x99T\x00\xf4\x9dJ" +
	"\x81o\\\xf96V\xea\xdd?\x0bt=\x02\xc8*@" +
	"\xd5\x84t\x0fA\xf6\xb1\xb4\xe7\x919\xf4\xe4\"\xd0\x0d" +
	"\x08\xa0 /\x8dJ\xc3\x08\xa8MHu\x80\xfe\x85O" +
	"\x0b[M\xad\xb1\x0bh\x19\xf1O\x8f\xec-\xfe\xea\x9d" +
	"\x7f\x03\x80U\xf3R=j\x0aQ\x014$\x9d\x9a\xce" +
	"\xff\xf9Oo\\\xba\xfd\xfc\xbf\xe1n\xa0\xc9\xb0\xd16" +
	"2\xcb\x1b\x8d\xbc\xfe\xde\x1f?\xf4`h\x19O\x05q" +
	"P\xdb!xj\xc8n\xcd\x10<\xea\xf4\xad\xab\xdb\xfb" +
	"z\xc6\x83\x81\x83\xb1\xf6\x93k|\xacF\xc2\xc7\xaa\x18" +
	"\x9c\xbas\xf7p\xc3\xcb`n\xd1\xa8\x83\x08E\x03S" +
	"\xcf\xe6\xc7fF_\xe5T\xec\xa0\xf2\xfe\x9dup\xa8" +
	"\xf7\xc7d.i#\x19\xe4\xa4\xb6 \xbd\xbePT2" +
	">\xbco&\xc7\xa6\xcb\xa4\x9bC'O\xd5\x1d\xfb\x92" +
	"\xa9\x9d\x0dt\x05\xd0\x0e2\xc7\xa1]\x02\xfa\xe2\\e" +
	"\xdf\xcd\xda\x99\x0f\xb9>>$\xc2\xc7\xc7\xe2\x83T\xef" +
	"\x91\xe3o\xfb\x07\xe6\x96\xe9\x9f&\xd5\xa8}\x16\xfa?" +
	"\x92N\xadFVa\x93\xdf\xc4\xdaZ\xda\x8e\xbaM\x8a" +
	"i\xd8\xcc\xddl2\xd74\xc2\x9f\xa4(V\xefa\xae" +
	"\x99lwNxFy\x83\xe1\xc6\xb3\x96\xe7\xae\x09f" +
	"XVk\xb2\xbd\xd5\xb1\x9a\xcb\x1b\x8c\x84\xcbq\xbaL" +
	"d\x00\x19\x01h\xec\x7f\x00\xbd\x90\xa0^,!zX" +
	"\x04\x12\x16\x01.\x12\xcb\xab\x10C\x06Q/$\x0a\xc0" +
	"b\x0e\x18ZCS\x95 \xd1u*F\xe9a\xb8~" +
	"\xb4\x84\xd7bj\xc2\xe4,iL\x88\x01\xd3\x98\xc1\xa8" +
	"w\xc1\xdf\xbd\xd8\xc5\x9a\xbcV\xe7d\xb2\xc5h?`" +
	"\xb2Ty\x86\xc5\x1df\xbbk\x1a]\xc0\x13\x02\xcf\x05" +
	"\xc8B@\xb8\xcb\x18\x86Oi=HTQ\xcf\xfcj" +
	"\xb1t\xbc\xd5\xa2r\xb36\x0f*k\x91\xa5\x86o\x8c" +
	"\x0c\x8fs\x14\xc6@\xc2\x18`\xbea\xfe\xaewU\x98" +
	"\xb0:/X\xb4q\x19\xe6\xa8\xcc^QG3\xf3X" +
	"^:B\x832\xcca6\xba\xff\x9a\xf9\x9f\x16z\x99" +
	"\xbf4\xbaE@\xa4\xf98\x1dX\x96\xff\xd9\x90\x95\x88" +
	"\xeb\x02\x1d\xd1\xd5\x84o\x14\x86Ov\xce\xd5\x84\xcf\x13" +
	"\x86\xaf#-)\x0b\xaeF\x84\x92F\xd5\xcd\xdab)" +
	"\x7f\x06\x00\x00\xff\xffJE\xe1\x0b"

func init() {
	schemas.Register(schema_db8274f9144abc7e,
		0x80ac741ec7fb8f65,
		0x8ac2ae68b4931e01,
		0x915d136837f8f086,
		0x92b20ad1a58ca0ca,
		0xaead580f97fddabc,
		0xd093963b95a4e107,
		0xd65259a8a6e0a22d,
		0xd8c5e7c7f5cce09f,
		0xdffe94ae546cdee3,
		0xe74bb2d0190cf89c,
		0xea3e50f7663f7bdf,
		0xece73ea1963281d3,
		0xf29f97dd675a9431)
}
